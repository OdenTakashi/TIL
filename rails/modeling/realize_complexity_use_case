## 複雑なユースケースの実現
Railsのmodelには2つのロジックを実装する
- ドメインロジック
  - 問題解決領域固有のルールや概念
    - ex.)ユーザーの購入額に応じてランクアップさせるなど
- ユースケースロジック
  - 実際のユースケースを実現するロジック
    - ex.)ユーザーがカートに商品を入れたら、カウントを増やすなど
アプリの規模が広がっていくことでユースケースロジックが肥大化していき、modelに実装していくことが難しくなっていく

### 新しいレイヤーの導入
modelの肥大化に伴いロジックをmodelから離しユースケースに対応するロジック実装を行うPOROクラスを定義する
デメリットとして、レールから外れることになるためRailsの恩恵を受けにくくなる
またDBと対応しないクラスのためモデルと同じようにcontroller, viewと紐付きができるようにしておくことが重要

#### ActiveModel::Attributes
方を持つ属性の定義を手助けするmodule

#### Activemodel::Callbacks
ActiveRecordのようにコールバック利用可能にするmodule

#### ActiveModel::Serialization
シリアライズ機能を提供するモジュール

#### ActiveModel::Validations
属性に対してのvalidationを手助けするモジュール

#### ActiveModel::Model
controller, viewと連携させることができるモジュール

#### プレゼンター
デコレーターとも呼ばれる。
Railsではhelperを全てのviewにloadされるため、名前の重複が問題となる。
それを解決するために、オブジェクトごとにメソッドを提供し利用できるviewを制限する



